---

layout : post

title : File Permissions in Linux

---

h2. {{page.title}}

p(publish_date). 06 December 2012

File naming conventions are very important in Linux. By default the filename sizes can range from 14 to 255 characters. 

h4. Valid Filenames

Here are some characters for valid filenames:

* Uppercase or lowercase letters “a-z,A-Z”

* Numbers “0-9”

* Dashs “-“

* Underscores “_”

* Periods “.”

In addition to the above naming rules:

* A period BEFORE filename hides the file from a default listing (ls).

* Ordinary filenames and directory filenames are case sensitive (i.e. a capital “A” is different than a lowercase “a”)

h4. File Pathnames

A pathname is used to specify the location of a file or directory. Pathnames are used when issuing Linux commands when working with directories and files.

There are 3 types of pathnames:

* *Absolute Pathname* (location reference starting from root “/”)
       E.g. /students/username/memos
           /home/username/report/ledger.txt  


* *Relative Pathname* (locaton reference relative another location)
       E.g. mytext.txt, ../reports, ./programs

* *Relative-to-home Pathname* (symbol “~” = user’s home directory path)
        E.g. ~,  ~/assignments, ~userid

h4. File Access Permission

Every user has a unique ID number associated with their account called a UID. This information is usually contained in the file called “/etc/passwd”

The user has the ability to “give-away” ownership of their directories or files to any user on Unix/Linux server by using the “chown” command.

Checks what groups are available in the server.

Command: 

<pre>groups</pre>

Example:

<pre>-rw-r——- 1 segurag profs 0 2012-11-27 10:34 file1 </pre>

The first character indicates information regarding the type of file:

* Character “-” indicates a file to store data or to execute

* Character “d” indicates a directory

The next series of 9 characters relate to the “permissions” of the “file1”.

Those next nine characters are combined to provide information regarding read (r) write (w) and execution (x) permissions for:

* User  (u) - The owner of the file or directory.

* Group (g) - Users that do not own the file or directory, but belong to the same group as the file. (i.e. SAME GROUP members)

* Other (o) - Users that do not own the file or directory, and do NOT belong to the same group as the file.(i.e. OTHER GROUP members)

An “r”, “w” or “x” indicates that the permission is permitted, and a “-” indicates that the permission was not permitted (or denied).

h4. Chmod Command

The chmod command allows the user to change file and directory permissions.

There are 2 ways to use the chmod command:

* Method #1: Relative method

Using characters to add (+), remove (-) or set (=)

Permissions for user(u), same group members(g), other group members(o), or all (i.e. ugo).

(e.g.  chmod g+rw filename, chmod go=rx filename, chmod u+x,g=x filename ) 

*  Method #2: Absolute method

Using octal numbers as a shortcut to represent permissions set for user, group and others.

(eg.  chmod 755 filename, chmod 644 filename )

The Absolute chmod command is a convenient “short-cut” to changing file and directory access permissions provided that you are comfortable converting octal and binary numbers.

h4. Example of Converting Binary to Octal

Here would be an example:
<p>1. Change permissions to binary (1-permissions granted, 0-permission denied):</p>
<p>&nbsp; &nbsp;r w x r - x - - x &nbsp; &nbsp; --&gt; &nbsp; &nbsp; 111101001</p>
<p>2. Since 1 octal digit equals 3 binary digits, separate into groups of three's:</p>
<p>&nbsp; &nbsp;111 &nbsp; &nbsp;101 &nbsp; &nbsp;001</p>
<p>&nbsp; &nbsp;(u) &nbsp; &nbsp;(g) &nbsp; &nbsp;(o)</p>
<p>3. In groups of 3, r=4, w=2, x=1 (if permission not granted, value is zero)</p>
<p>&nbsp; &nbsp;4+2+1 &nbsp;4+0+1 &nbsp;0+0+1</p>
<p>&nbsp; &nbsp;7 &nbsp; &nbsp; &nbsp;5 &nbsp; &nbsp; &nbsp;1</p>
<p>4. Issue command: chmod 751 filename&nbsp;&nbsp;</p> 

Changing access permissions for directories is similar to changing access permissions for files except:

* With execute permissions only for a directory, users may be able to access the directory, but you cannot view the directory’s contents (e.g. cannot use ls).

* With execute and read permissions for a directory, you may be able to access the directory and view the directory’s contents (e.g. can use ls).

* With full permissions (execute, read, and write) users may be able to access, view contents of the directory, but create subdirectories or files within that directory!

h4. Pass-Through Permissions

In order to allow others to share files within your directory, you need to set “pass-through” permissions within your home directory.

This can be thought of as a “secret-open-door” to allow other users access to navigate to sub-directories that contain shared files.

* Set Directory/Regular File Permissions Upon Creation*

Are you tired of continually issuing chmod commands after you have created new files or directories?

The “umask” command is used to automatically set (actually hide permissions) of newly-created directories or regular files. That is why they call it a “mask”…

There are different masks for different purposes: for example, when you compile a program, there is usually a “compile mask” that sets execute permissions for the user to run the executable program.

To determine the default permissions for newly created directories, that “umask” octal value is subtracted from the full permissions octal number (i.e. 777). You can “drop” the first zero that is displayed for the “umask” value.

h4. Unmask Example Directories

Therefore, we can determine the permissions for newly-created directories while this shell session is running:

for example:   

777 - 077  (umask value) = 700

Therefore, permissions for newly-created directories now will be:

<pre> r w x - - - - - - </pre>

h4. Unmask Example: Regular Files

For determining permissions for newly-created regular files, just subtract umask number from 666.

for example:   

666 - 077 (umask value) = 660

Therefore, permissions for newly-created regular files now will be:

<pre>Permissions:   r w - - - - - - -</pre>